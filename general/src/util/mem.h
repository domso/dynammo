#ifndef general_util_mem_h
#define general_util_mem_h

#include <cstring>

namespace util {
    namespace mem {
        //______________________________________________________________________________________________________
        //
        // see memset()
        //______________________________________________________________________________________________________
        template <typename T>
        void set(T* src, const int c) {
            memset(src, c, sizeof(T));
        }
        //______________________________________________________________________________________________________
        //
        // see memcpy()
        //______________________________________________________________________________________________________
        template <typename T>
        void cpy(T* dest, const T* src, const int n = 1) {
            memcpy(dest, src, sizeof(T) * n);
        }
        //______________________________________________________________________________________________________
        //
        // see memccpy()
        //______________________________________________________________________________________________________
        template <typename T>
        void ccpy(T* dest, const T* src, int stop) {
            memccpy(dest, src, stop, sizeof(T));
        }
        //______________________________________________________________________________________________________
        //
        // see memcmp()
        //______________________________________________________________________________________________________
        template <typename T>
        int cmp(const T* dest, const T* src) {
            return memcmp(dest, src, sizeof(T));
        }
    }
}

#endif
